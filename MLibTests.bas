Attribute VB_Name = "MLibTests"
Option Compare Database
Option Explicit

Private Const MTEST_LIBDIR    As String = "C:\Users\franc\Documents\AsciiPaint\libraries"
Private Const MTEST_LIBNAME   As String = "testlib.aplib"
Private Const MTEST_LIBITEMS_SUBDIR As String = "test_lib_items\items"

Public Sub Test_CreateTestLib()
  Dim sLibFilename    As String
  Dim fOK             As Boolean
  Dim hLib            As Integer
  Dim sAuthorName     As String
  Dim sCopyright      As String
  Dim sDescription    As String
  Dim rowHeader       As CRow
  Dim i               As Integer
  Dim rowCustProps    As New CRow
  Dim sLibDir         As String
  Dim sItemsDir       As String
  
  'sLibFilename = CombinePath(CurrentProject.Path, "testlib.aplib")
  sItemsDir = CombinePath(CurrentProject.Path, MTEST_LIBITEMS_SUBDIR)
  sLibDir = MTEST_LIBDIR
  sLibFilename = CombinePath(sLibDir, MTEST_LIBNAME)
  
  If ExistFile(sLibFilename) Then
    Kill sLibFilename
  End If
  
  sAuthorName = "Francesco Foti"
  sCopyright = "(C) 2021 devinfo.net, Francesco Foti"
  sDescription = "This is an AsciiPaint library file generated by the test framework"
  
  rowCustProps.AddCol "MOTD", "Hello, i'm being witten at exactly: " & Now, 0, 0
  rowCustProps.AddCol "Username", Environ$("USERNAME"), 0, 0
  rowCustProps.AddCol "Device", Environ$("COMPUTERNAME"), 0, 0
  rowCustProps.AddCol "PROCESSOR_ARCHITECTURE", Environ$("PROCESSOR_ARCHITECTURE"), 0, 0
  rowCustProps.AddCol "PROCESSOR_IDENTIFIER", Environ$("PROCESSOR_IDENTIFIER"), 0, 0
  rowCustProps.AddCol "PROCESSOR_LEVEL", Environ$("PROCESSOR_LEVEL"), 0, 0
  rowCustProps.AddCol "PROCESSOR_REVISION", Environ$("PROCESSOR_REVISION"), 0, 0
  
  fOK = LibCreateLibrary(sLibFilename, sAuthorName, sCopyright, sDescription, rowCustProps)
  If Not fOK Then
    Debug.Print LibLastErrDesc()
    Exit Sub
  End If
  
  Debug.Print "Library file [" & sLibFilename & "] created successfully."
  
  fOK = OpenLibraryFile(sLibFilename, hLib) 'Opens in read only mode
  If Not fOK Then
    Debug.Print "Failed to open lib for read: " & LibLastErrDesc()
    Exit Sub
  End If
  
  fOK = LibReadHeader(hLib, rowHeader, rowCustProps)
  Debug.Print "Library header:"
  For i = 1 To rowHeader.ColCount
    Debug.Print rowHeader.ColName(i); ": "; rowHeader(i)
  Next i
  If Not rowCustProps Is Nothing Then
    Debug.Print rowCustProps.ColCount & " custom properties:"
    For i = 1 To rowCustProps.ColCount
      Debug.Print rowCustProps.ColName(i); ": "; rowCustProps(i)
    Next i
  End If
  CloseLibrary hLib
  
  Dim vAddFiles   As Variant
  Dim vFilename   As Variant
  Dim hBlock      As Long
  Dim rowProps    As CRow
  Dim sFullFilename As String
  
  fOK = OpenLibraryFile(sLibFilename, hLib, True) 'Opens in WRITE mode
  If Not fOK Then
    Debug.Print "Failed to open lib for write: " & LibLastErrDesc()
    Exit Sub
  End If
  vAddFiles = Array("biSQL.pdf", "color_palette.ico")
  For Each vFilename In vAddFiles
    Set rowProps = New CRow
    sFullFilename = CombinePath(sItemsDir, vFilename)
    Debug.Print "Adding file: " & sFullFilename
    
    rowProps.AddCol "filesize", FileLen(sFullFilename) & "", 0, 0
    rowProps.AddCol "lastmodified", Format$(FileDateTime(sFullFilename), "yyyy.mm.dd hh:mm:ss"), 0, 0
    rowProps.AddCol "fileattributes", "&H" & Hex$(GetAttr(sFullFilename)) & "", 0, 0
    
    hBlock = LibAddFile(hLib, vFilename, sFullFilename, rowProps)
    If hBlock <> HBLOCK_INVALID Then
      Debug.Print "File [" & vFilename & "] added at block #" & hBlock
    Else
      Debug.Print "LibAddFile failed: " & LibLastErrDesc()
      Exit For
    End If
    
    Set rowProps = Nothing
  Next
  
  CloseLibrary hLib
  'Shell """C:\Program Files (x86)\Notepad++\notepad++.exe"" " & sLibFilename
End Sub

Public Sub Test_LibDir1()
  Dim sLibDir       As String
  Dim sLibFilename  As String
  
  sLibDir = MTEST_LIBDIR
  sLibFilename = CombinePath(sLibDir, MTEST_LIBNAME)
  
  DumpLibDir sLibFilename, False
End Sub

Public Sub Test_LibDir2()
  Dim sLibDir       As String
  Dim sLibFilename  As String
  
  sLibDir = MTEST_LIBDIR
  sLibFilename = CombinePath(sLibDir, "testlib2.aplib")
  
  DumpLibDir sLibFilename, True
End Sub

Public Sub DumpLibDir(ByVal psLibFilename As String, ByVal pfRaw As Boolean)
  Dim fOK             As Boolean
  Dim hLib            As Integer
  Dim rowHeader       As CRow
  Dim i               As Integer
  Dim rowCustProps    As New CRow
  
  Dim hBlock          As Long
  Dim iBlockType      As Integer
  Dim lBlockSize      As Long
  Dim hNextSibling    As Long
  Dim hPrevSibling    As Long
  Dim hNextBlock      As Long
  Dim lAttribs        As Long
  Dim sBlockName      As String
  Dim sTag            As String
  Dim iLinkedBlockCt  As Integer
  
  fOK = OpenLibraryFile(psLibFilename, hLib) 'Opens in read only mode
  If Not fOK Then
    Debug.Print "Failed to open lib for read: " & LibLastErrDesc()
    Exit Sub
  End If
  
  fOK = LibReadHeader(hLib, rowHeader, rowCustProps)
  Debug.Print "Library header:"
  For i = 1 To rowHeader.ColCount
    Debug.Print rowHeader.ColName(i); ": "; rowHeader(i)
  Next i
  If Not rowCustProps Is Nothing Then
    Debug.Print rowCustProps.ColCount & " custom properties:"
    For i = 1 To rowCustProps.ColCount
      Debug.Print rowCustProps.ColName(i); ": "; rowCustProps(i)
    Next i
  End If
  
  'Go to the first block (the library header)
  hBlock = 1&
'  If LibGotoBlock(hLib, hBlock) <> hBlock Then
'    Debug.Print "Failed to open lib for read: " & LibLastErrDesc()
'    GoTo TestLibDir_Exit
'  End If
  
  Do While LibIsValidBlockHandle(hLib, hBlock)
    fOK = LibReadBlockHeader(hLib, hBlock, iBlockType, lBlockSize, hNextSibling, hPrevSibling, lAttribs, sBlockName, sTag)
    If Not fOK Then
      Debug.Print "Error reading block: " & LibLastErrDesc()
      GoTo TestLibDir_Exit
    End If
    hNextBlock = Seek(hLib) + lBlockSize
    
    If Not pfRaw Then
      'we skip the sibling blocks as we read them next to the father block
      If hPrevSibling = HBLOCK_INVALID Then
        Debug.Print "Block name: "; sBlockName
        Debug.Print "============"; String$(Len(sBlockName), "=")
        Debug.Print "Block #" & hBlock
        Debug.Print "Block type: "; iBlockType
        Debug.Print "Block size: "; lBlockSize
        Debug.Print "Next block --> #" & hNextSibling
        Debug.Print "Prev block --> #" & hPrevSibling
        Debug.Print "Attributes: "; lAttribs
        Debug.Print "Tag       : "; sTag
        DoEvents
        
        If hNextSibling <> HBLOCK_INVALID Then
          iLinkedBlockCt = 1
          Do
            hBlock = LibGotoNextBlock(hLib, hBlock)
            fOK = LibReadBlockHeader(hLib, hBlock, iBlockType, lBlockSize, hNextSibling, hPrevSibling, lAttribs, sBlockName, sTag)
            If Not fOK Then
              Debug.Print "Error reading linked block: " & LibLastErrDesc()
              GoTo TestLibDir_Exit
            End If
            Debug.Print "  Block name: "; sBlockName
            Debug.Print "  ------------"; String$(Len(sBlockName), "-")
            Debug.Print "  Linked Block number "; iLinkedBlockCt
            Debug.Print "  Block #" & hBlock
            Debug.Print "  Block type: "; iBlockType
            Debug.Print "  Block size: "; lBlockSize
            Debug.Print "  Next block --> #" & hNextSibling
            Debug.Print "  Prev block --> #" & hPrevSibling
            Debug.Print "  Attributes: "; lAttribs
            Debug.Print "  Tag       : "; sTag
            DoEvents
            
            iLinkedBlockCt = iLinkedBlockCt + 1
          Loop Until hNextSibling = HBLOCK_INVALID
        End If
      
      End If  'is sibling
    Else
      'raw
      Debug.Print "Block name: "; sBlockName
      Debug.Print "============"; String$(Len(sBlockName), "=")
      Debug.Print "Block #" & hBlock
      Debug.Print "Block type: "; iBlockType
      Debug.Print "Block size: "; lBlockSize
      Debug.Print "Next block --> #" & hNextSibling
      Debug.Print "Prev block --> #" & hPrevSibling
      Debug.Print "Attributes: "; lAttribs
      Debug.Print "Tag       : "; sTag
    End If
    
    hBlock = hNextBlock
    DoEvents
  Loop
  
TestLibDir_Exit:
  CloseLibrary hLib
  
End Sub

Public Sub Test_LibLoadDir()
  Dim sLibDir         As String
  Dim sLibFilename    As String
  Dim fOK             As Boolean
  Dim hLib            As Integer
  Dim lstDir          As CList
  
  sLibDir = MTEST_LIBDIR
  sLibFilename = CombinePath(sLibDir, MTEST_LIBNAME)
  
  fOK = OpenLibraryFile(sLibFilename, hLib) 'Opens in read only mode
  If Not fOK Then
    Debug.Print "Failed to open lib for read: " & LibLastErrDesc()
    Exit Sub
  End If
  
  fOK = LibLoadDirectory(hLib, lstDir)
  If Not fOK Then
    Debug.Print "Failed to get lib directory: " & LibLastErrDesc()
  End If
  
  LogListDump lstDir, "Directory of " & sLibFilename, "hblock:11;blocktype:2;blockname:40", pfDumpToString:=False
  CloseLibrary hLib
End Sub

Public Sub Test_CLibLoadDir()
  Dim sLibDir         As String
  Dim sLibFilename    As String
  Dim fOK             As Boolean
  Dim oLib            As New CLibrary
  
  sLibDir = MTEST_LIBDIR
  sLibFilename = CombinePath(sLibDir, MTEST_LIBNAME)
  
  fOK = oLib.OpenLibrary(sLibFilename, True) 'Opens in read only mode
  If Not fOK Then
    Debug.Print "Failed to open lib for read: " & oLib.LastErrDesc()
    Exit Sub
  End If
  
  fOK = oLib.LoadDirectory()
  If Not fOK Then
    Debug.Print "Failed to get lib directory: " & oLib.LastErrDesc()
  End If
  
  LogListDump oLib.Directory, "Directory of " & oLib.Filename, "hblock:11;blocktype:2;blockname:40", pfDumpToString:=False
  Debug.Print "Access mode: " & IIf(oLib.IsReadOnly, "Read Only", "Read/Write")
  oLib.CloseLibrary
End Sub


Public Sub Test_ParseVT100()
  Dim oGrid         As New CConsoleGrid
  Dim sVT100        As String
  Dim iRetCols      As Integer
  Dim sFragmentPre  As String
  Dim sFragmentSep  As String
  Dim sFragmented   As String
  Dim i             As Integer
  
  sFragmentPre = VTX_SETWIDTH(11) & VTX_DTFLAGS(1234&)
  sFragmentSep = VT_NOOP()
  
  oGrid.Resize 10, 80
  
  sVT100 = "Bonjour madame!"
  'sVT100 = VT_NOOP() & " madame!"
  For i = 1 To Len(sVT100)
    sFragmented = sFragmented & Mid$(sVT100, i, 1)
    If i < Len(sVT100) Then
      sFragmented = sFragmented & sFragmentSep
    End If
  Next i
  sVT100 = sFragmentPre & sFragmented
  oGrid.ParseVT100 1, 1, sVT100, iRetCols, False
  
End Sub
